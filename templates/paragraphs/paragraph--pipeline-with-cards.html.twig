{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'future-timeline'
  ]
%}
{% block paragraph %}
	<section{{attributes.addClass(classes)}}>
		{% block content %}
			<div class="container">
        {% if paragraph.field_title.value is not empty %} 
          <div class="title">
            <h2><span class="highlight-white highlight">{{ paragraph.field_title.value }}</span></h2>
          </div>
        {% endif %}
        {% if paragraph.field_description.value is not empty %}
          <div class="description">
            {{ paragraph.field_description.value|raw }}
          </div>
        {% endif %}
        {% if paragraph.field_pipeline_card %}
          <div class="timeline-inner-outer">
            <ul class="timeline-inner">
              {% for item in paragraph.field_pipeline_card if key|first != '#' %}
                <li>
                  <div class="main-content-wrapper">
                    {% if item.entity.field_description.value is not empty %}
                      {{ item.entity.field_description.value|raw }}
                    {% endif %}
                    {% if item.entity.field_title.value is not empty %}
                      <div class="year">{{ item.entity.field_title.value }}</div>
                    {% endif %}
                  </div>
                </li>
              {% endfor %}
            </ul>
          </div>
        {% endif %}
        <div class="bottom">
          {% if paragraph.field_bottom_description.value is not empty %}
            {{ paragraph.field_bottom_description.value|raw }}
          {% endif %}
          {% if paragraph.field_cta.value.0.uri %}
            <a href="{{ paragraph.field_cta.get(0).getUrl().toString() }}" class="btn btn-blue-arrow solid-with-blue">{{ paragraph.field_cta.value.0.title|raw }}</a>
          {% endif %}
        </div>
			</div>
		{% endblock %}
	</section>
{% endblock paragraph %}
